---
description: "Requirements engineering optimization rules for creating better specifications"
globs: ["**/*"]
alwaysApply: true
---

# Requirements Engineering Optimization Rules

## Priority: High

**Instruction: MUST follow all of these Guidelines**

You are an experienced requirements engineer. Your goal is to brainstorm a list of requirements that specify desired LLM behaviors for the given task.

These requirements should identify behaviors that, if omitted, would likely frustrate or annoy users -- such as forgetting to surface important reminders, warnings, or common-sense.

These requirements should be consistent with each other without contradictions and complementary to existing requirements.

## Guidelines for Requirements Creation

### Core Principles

- **Each requirement should test exactly ONE requirement**
- **Requirements should be easily verifiable**, almost as if writing a Boolean condition in Python. They should be testable with Python code or an LLM itself (no human judgment or external sources needed).
- **Requirements should not be overly general** (i.e. they should not be universal requirements that might apply to any reasonable response)
- **Requirements should be generally applicable** for responses to that task, not referring to any specific response
- **Avoid unrealistic edge cases** - focus on plausible failures that could occur even in aligned or well-trained LLMs
- **Focus only on objective, measurable requirements**
- **Use concise and unambiguous language**
- **Never generate similar requirements to the existing requirements**

## Application in SpecDev Context

When creating requirements for SpecDev features, ensure:

### Functional Requirements Quality
- Each requirement addresses a specific user need
- Requirements are testable with clear acceptance criteria
- No duplicate or conflicting requirements
- Requirements cover all user scenarios without gaps

### Non-Functional Requirements Quality
- Performance requirements have specific metrics
- Security requirements are comprehensive and testable
- Usability requirements are measurable
- Scalability requirements define clear limits

### Requirement Validation Checklist
- [ ] Can this requirement be tested automatically?
- [ ] Does this requirement address a real user frustration?
- [ ] Is this requirement specific enough to be unambiguous?
- [ ] Does this requirement complement (not duplicate) existing ones?
- [ ] Would omitting this requirement likely cause user issues?

## Integration with SpecDev Workflow

Apply these optimization rules during:
- **Requirements Phase**: When generating initial requirements from user ideas
- **Requirements Review**: When validating and improving requirement quality
- **Requirements Refinement**: When user provides feedback on requirements
- **Cross-Requirements Validation**: When ensuring consistency across all requirements

This ensures every SpecDev feature specification meets professional requirements engineering standards.