---
description: "Rules for generating high-quality requirements, design, and tasks with comprehensive research and best practices"
globs: ["**/*"]
alwaysApply: true
---

# High-Quality Requirements, Design & Tasks Generation

## Priority: CRITICAL - RESEARCH-BACKED HIGH-QUALITY DELIVERABLES

**INSTRUCTION: Every requirement, design decision, and task MUST be research-backed and follow current industry best practices.**

## Requirements Generation Excellence

### Research-First Requirements Process
```
BEFORE WRITING ANY REQUIREMENT:

PARALLEL RESEARCH (Execute simultaneously):
┌─ Web Search: "user requirements [domain] best practices 2025"
├─ Web Search: "[feature-type] user experience patterns 2025"
├─ Web Search: "accessibility requirements [feature] WCAG 2025"
├─ Web Search: "security requirements [domain] OWASP 2025"
├─ Web Search: "[industry] compliance requirements 2025"
├─ Codebase Search: "existing similar requirements"
├─ File Read: current requirements documentation
└─ Grep Search: "requirement patterns in existing specs"
```

### High-Quality Requirements Framework
```markdown
## Requirement: [Feature Name]

### Research Foundation
- **Industry Standards**: [Link to standards/best practices found]
- **User Experience Research**: [UX patterns and studies referenced]
- **Security Standards**: [OWASP/security guidelines applied]
- **Accessibility**: [WCAG guidelines and requirements]
- **Performance**: [Performance benchmarks and targets]

### Requirement Specification
**As a** [user type researched from UX studies]
**I want** [specific functionality based on industry patterns]
**So that** [value proposition backed by user research]

### Acceptance Criteria (Research-Backed)
□ **Functional**: [Based on industry best practices]
  - [Specific behavior from successful implementations]
  - [Error handling from common failure patterns]
  - [Edge cases from community discussions]

□ **Performance**: [Based on current performance standards]
  - Load time: < [researched benchmark] ms
  - Response time: < [industry standard] ms
  - Throughput: > [performance target] req/sec

□ **Security**: [Based on OWASP and security research]
  - [Security control from latest guidelines]
  - [Vulnerability prevention from recent advisories]
  - [Data protection from privacy regulations]

□ **Accessibility**: [Based on WCAG and accessibility research]
  - [Screen reader compatibility requirements]
  - [Keyboard navigation standards]
  - [Color contrast and visual requirements]

□ **Usability**: [Based on UX research and patterns]
  - [Interaction patterns from successful apps]
  - [Error messaging from UX best practices]
  - [User feedback mechanisms]

### Implementation Constraints
- **Technology**: [Based on research of current best options]
- **Dependencies**: [Researched and validated dependencies]
- **Browser Support**: [Based on current usage statistics]
- **Mobile Support**: [Based on responsive design best practices]

### Definition of Done
□ Implementation follows researched best practices
□ Security requirements validated against OWASP standards
□ Performance meets researched benchmarks
□ Accessibility tested against WCAG guidelines
□ User testing validates UX research assumptions
□ Code review confirms implementation quality
□ Documentation updated with research references
```

## Design Excellence Framework

### Research-Driven Design Process
```
BEFORE CREATING ANY DESIGN:

PARALLEL ARCHITECTURE RESEARCH:
┌─ Web Search: "software architecture patterns [use-case] 2025"
├─ Web Search: "[technology-stack] architecture best practices"
├─ Web Search: "scalable design patterns [domain] examples"
├─ Web Search: "microservices vs monolith [use-case] 2025"
├─ Web Search: "database design patterns [data-type] 2025"
├─ Web Search: "API design REST GraphQL best practices"
├─ Codebase Search: "existing architecture patterns"
├─ File Read: current architecture documentation
└─ GitHub Search: "similar project architectures"
```

### High-Quality Design Template
```markdown
## Design: [Feature/System Name]

### Architecture Research Summary
- **Pattern Selected**: [Architecture pattern] - [Reason based on research]
- **Alternatives Considered**: [Other patterns] - [Why not chosen]
- **Industry Examples**: [Links to successful implementations]
- **Scalability Research**: [Scalability patterns and considerations]
- **Performance Research**: [Performance implications and optimizations]

### System Architecture
```mermaid
graph TB
    A[User Interface] --> B[API Gateway]
    B --> C[Business Logic]
    C --> D[Data Layer]
    
    %% Research-backed component decisions
    subgraph "Frontend (Research: React 18 + TypeScript)"
        A1[React Components]
        A2[State Management - Zustand]
        A3[Routing - React Router v6]
    end
    
    subgraph "Backend (Research: Node.js + Express)"
        B1[Authentication - JWT]
        B2[Validation - Zod]
        B3[Error Handling]
    end
    
    subgraph "Database (Research: PostgreSQL + Prisma)"
        D1[User Data]
        D2[Application Data]
        D3[Audit Logs]
    end
```

### Technology Decisions (Research-Backed)
| Component | Technology | Version | Justification |
|-----------|------------|---------|---------------|
| Frontend | React | 18.x | [Research findings and comparison] |
| State Management | Zustand | 4.x | [Performance and simplicity research] |
| Backend | Node.js + Express | 20.x + 4.x | [Ecosystem and performance research] |
| Database | PostgreSQL | 15.x | [Data consistency and performance research] |
| ORM | Prisma | 5.x | [Developer experience and type safety research] |

### Security Design (OWASP-Based)
- **Authentication**: [Method based on security research]
- **Authorization**: [Pattern based on access control research]
- **Data Protection**: [Encryption based on current standards]
- **Input Validation**: [Validation based on OWASP guidelines]
- **Error Handling**: [Security-conscious error handling]

### Performance Design
- **Caching Strategy**: [Based on performance research]
- **Database Optimization**: [Indexing and query optimization]
- **Frontend Optimization**: [Bundle splitting and lazy loading]
- **CDN Strategy**: [Content delivery optimization]

### Monitoring and Observability
- **Logging**: [Structured logging based on best practices]
- **Metrics**: [Key metrics based on industry standards]
- **Alerting**: [Alert strategies based on SRE practices]
- **Tracing**: [Distributed tracing implementation]
```

## Task Generation Excellence

### Research-Backed Task Creation
```
BEFORE CREATING ANY TASK:

PARALLEL IMPLEMENTATION RESEARCH:
┌─ Web Search: "how to implement [feature] [technology] 2025"
├─ Web Search: "[feature] implementation best practices examples"
├─ Web Search: "common mistakes [feature] implementation"
├─ Web Search: "[technology] [feature] tutorial step by step"
├─ Web Search: "testing strategies [feature] [technology]"
├─ GitHub Search: "[feature] implementation examples"
├─ Reddit Search: "[technology] [feature] developer experience"
├─ Codebase Search: "similar feature implementations"
└─ File Search: "related configuration and setup files"
```

### High-Quality Task Template
```markdown
## Task: [Task Name]

### Research Summary
- **Implementation Approach**: [Method based on research]
- **Best Practices Source**: [Links to authoritative sources]
- **Common Pitfalls**: [Issues found in research and how to avoid]
- **Testing Strategy**: [Testing approach based on community practices]
- **Performance Considerations**: [Optimization techniques researched]

### Prerequisites Research
□ **Dependencies**: [Researched and validated]
  - [Package name] v[version] - [Reason for this version]
  - [Configuration needed] - [Based on documentation]
  
□ **Environment Setup**: [Based on setup guides]
  - [Environment variable] - [Purpose and security considerations]
  - [Configuration file] - [Best practices for settings]

### Implementation Steps (Research-Guided)

#### Step 1: [Setup and Configuration]
**Research Reference**: [Link to authoritative guide]
```bash
# Commands based on official documentation
npm install [package]@[specific-version]
```
**Validation**: [How to verify this step worked]
**Common Issues**: [Problems found in research and solutions]

#### Step 2: [Core Implementation]
**Research Reference**: [Link to best practices]
**Implementation Pattern**: [Pattern based on research]
```typescript
// Code structure based on community best practices
// Comments explaining decisions based on research
```
**Error Handling**: [Based on common failure modes researched]

#### Step 3: [Testing Implementation]
**Testing Strategy**: [Based on testing best practices research]
```typescript
// Test cases based on common scenarios and edge cases
```
**Coverage Requirements**: [Based on industry standards]

### Quality Gates (Research-Based)
□ **Code Quality**: Follows [style guide] based on [research source]
□ **Security**: Implements [security practices] per OWASP guidelines
□ **Performance**: Meets [performance targets] based on benchmarks
□ **Accessibility**: Complies with WCAG [version] requirements
□ **Testing**: Achieves [coverage]% test coverage
□ **Documentation**: Includes research references and decisions

### Validation Criteria
□ **Functional Testing**: [Based on acceptance criteria research]
□ **Performance Testing**: [Based on performance research]
□ **Security Testing**: [Based on security vulnerability research]
□ **User Testing**: [Based on UX research and patterns]
□ **Integration Testing**: [Based on integration best practices]

### Success Metrics
- **Performance**: [Specific metrics based on research]
- **User Experience**: [UX metrics based on industry standards]
- **Security**: [Security validation based on standards]
- **Maintainability**: [Code quality metrics]

### Rollback Plan
**If Implementation Fails**: [Based on deployment best practices]
1. [Rollback steps based on research]
2. [Data recovery procedures]
3. [Communication plan]

### Post-Implementation
□ **Monitoring**: Set up monitoring based on SRE practices
□ **Documentation**: Update docs with implementation decisions
□ **Team Knowledge**: Share research findings and lessons learned
□ **Continuous Improvement**: Plan for future enhancements
```

## Quality Assurance Integration

### Requirements Quality Checklist
```
□ **Research-Backed**: Every requirement references current best practices
□ **Testable**: Each requirement has measurable acceptance criteria
□ **User-Centered**: Based on actual user research and UX patterns
□ **Security-Conscious**: Incorporates OWASP and security guidelines
□ **Performance-Aware**: Includes performance targets from research
□ **Accessible**: Meets WCAG accessibility standards
□ **Technically Feasible**: Validated against current technology capabilities
```

### Design Quality Checklist
```
□ **Architecture Research**: Design based on proven architectural patterns
□ **Technology Validation**: Each technology choice backed by research
□ **Scalability Planning**: Design accounts for growth based on patterns
□ **Security Integration**: Security designed in, not bolted on
□ **Performance Optimization**: Performance considered from design phase
□ **Maintainability**: Design supports long-term maintenance
□ **Documentation**: All decisions documented with research references
```

### Task Quality Checklist
```
□ **Implementation Research**: Each task based on current best practices
□ **Step-by-Step Clarity**: Clear, actionable steps with research backing
□ **Error Prevention**: Common pitfalls identified and avoided
□ **Testing Integration**: Testing strategy included in every task
□ **Quality Gates**: Clear criteria for task completion
□ **Rollback Planning**: Failure scenarios and recovery planned
□ **Knowledge Capture**: Research findings and decisions documented
```

This framework ensures every deliverable is backed by current research, follows industry best practices, and maintains the highest quality standards throughout the development process.