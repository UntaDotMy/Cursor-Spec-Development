---
description: "Comprehensive templates for all project types and platforms"
globs: ["**/*"]
alwaysApply: false
---

# Comprehensive Project Templates for All Platforms

## Template Selection Guide

Based on user's project description, select the appropriate template:

- **Web Applications**: React, Vue, Angular, Next.js, Nuxt.js
- **Mobile Applications**: React Native, Flutter, Ionic, Native iOS/Android
- **Desktop Applications**: Electron, Tauri, .NET, Qt
- **Backend/API**: Node.js, Python, Java, .NET Core, Go, Rust
- **Full-Stack**: MEAN, MERN, Django, Rails, Laravel
- **Games**: Unity, Unreal, Godot, Web Games
- **Cross-Platform**: Flutter, React Native, .NET MAUI

## Web Application Templates

### React/Next.js Web Application
```markdown
# Requirements Document - [App Name]

## Project Context Analysis
- **Project Type**: Web Application
- **Framework**: React 18+ with Next.js 14+
- **Business Domain**: [Domain]
- **Complexity**: [Level]
- **Deployment**: Vercel/Netlify/AWS

## Functional Requirements

### REQ-WEB-001: Modern React Architecture
**User Story:** As a developer, I want a scalable React architecture, so that the application is maintainable and performant

#### Acceptance Criteria
1. WHEN application loads THEN it SHALL use React 18+ concurrent features
2. IF components need state THEN system SHALL use appropriate state management (Context/Zustand/Redux)
3. WHERE routing is needed THEN system SHALL implement Next.js App Router

### REQ-WEB-002: Responsive Design
**User Story:** As a user, I want the app to work on all devices, so that I can access it anywhere

#### Acceptance Criteria
1. WHEN viewed on mobile THEN layout SHALL adapt to screen size
2. IF user interacts with touch THEN system SHALL respond appropriately
3. WHERE content overflows THEN system SHALL handle gracefully

## Technical Requirements
- React 18+ with TypeScript
- Next.js 14+ with App Router
- Tailwind CSS for styling
- ESLint + Prettier for code quality
- Vercel for deployment
- Progressive Web App capabilities

## Design Template
# Design Document - [App Name]

## Technology Research Summary
**Latest Versions (2025-2026):**
- React: v18.2+ - Concurrent features, Suspense, Server Components
- Next.js: v14+ - App Router, Server Actions, Turbopack
- TypeScript: v5.0+ - Decorators, const assertions

**Recommended Patterns:**
- Server Components for data fetching
- Client Components for interactivity
- App Router for file-based routing
- Server Actions for mutations

## Component Architecture
```

### Vue/Nuxt Web Application
```markdown
# Requirements Document - [App Name]

## Project Context Analysis
- **Project Type**: Web Application
- **Framework**: Vue 3 with Nuxt 3
- **Business Domain**: [Domain]
- **Complexity**: [Level]

## Functional Requirements

### REQ-VUE-001: Vue 3 Composition API
**User Story:** As a developer, I want modern Vue patterns, so that code is reusable and maintainable

#### Acceptance Criteria
1. WHEN components are created THEN they SHALL use Composition API
2. IF state is shared THEN system SHALL use Pinia store
3. WHERE reactivity is needed THEN system SHALL use Vue 3 reactivity system

## Technical Requirements
- Vue 3 with Composition API
- Nuxt 3 with auto-imports
- Pinia for state management
- TypeScript support
- Vite for build tooling
```

## Mobile Application Templates

### React Native Mobile App
```markdown
# Requirements Document - [Mobile App Name]

## Project Context Analysis
- **Project Type**: Cross-Platform Mobile Application
- **Framework**: React Native with Expo
- **Platforms**: iOS and Android
- **Business Domain**: [Domain]

## Functional Requirements

### REQ-MOBILE-001: Cross-Platform Compatibility
**User Story:** As a user, I want the app to work on both iOS and Android, so that I can use it regardless of my device

#### Acceptance Criteria
1. WHEN app runs on iOS THEN it SHALL follow iOS design guidelines
2. IF app runs on Android THEN it SHALL follow Material Design
3. WHERE platform differences exist THEN app SHALL handle gracefully

### REQ-MOBILE-002: Native Performance
**User Story:** As a user, I want smooth app performance, so that I have a native-like experience

#### Acceptance Criteria
1. WHEN scrolling lists THEN frame rate SHALL remain above 60fps
2. IF animations are used THEN they SHALL be hardware-accelerated
3. WHERE heavy operations occur THEN they SHALL not block UI thread

## Technical Requirements
- React Native 0.72+
- Expo SDK 49+
- TypeScript for type safety
- React Navigation for routing
- AsyncStorage for local storage
- Push notifications support
- Offline functionality

## Platform-Specific Requirements

### iOS Requirements
- Follow iOS Human Interface Guidelines
- Support iPhone and iPad layouts
- Handle iOS-specific permissions
- App Store compliance

### Android Requirements
- Follow Material Design 3
- Support various screen sizes
- Handle Android permissions model
- Google Play Store compliance
```

### Flutter Mobile App
```markdown
# Requirements Document - [Flutter App Name]

## Project Context Analysis
- **Project Type**: Cross-Platform Mobile Application
- **Framework**: Flutter
- **Language**: Dart
- **Platforms**: iOS, Android, Web, Desktop

## Functional Requirements

### REQ-FLUTTER-001: Multi-Platform Support
**User Story:** As a user, I want to use the app on any platform, so that I have consistent experience

#### Acceptance Criteria
1. WHEN app runs on mobile THEN it SHALL adapt to mobile interactions
2. IF app runs on desktop THEN it SHALL support keyboard and mouse
3. WHERE platform features differ THEN app SHALL provide appropriate alternatives

## Technical Requirements
- Flutter 3.13+
- Dart 3.0+
- Material Design 3 / Cupertino widgets
- State management (Bloc/Riverpod)
- Local storage (Hive/SQLite)
- Network layer (Dio)
```

## Desktop Application Templates

### Electron Desktop App
```markdown
# Requirements Document - [Desktop App Name]

## Project Context Analysis
- **Project Type**: Cross-Platform Desktop Application
- **Framework**: Electron with React/Vue
- **Platforms**: Windows, macOS, Linux
- **Business Domain**: [Domain]

## Functional Requirements

### REQ-DESKTOP-001: Native Desktop Experience
**User Story:** As a user, I want a native desktop feel, so that the app integrates well with my OS

#### Acceptance Criteria
1. WHEN app starts THEN it SHALL integrate with OS notifications
2. IF files are dropped THEN app SHALL handle file operations
3. WHERE keyboard shortcuts are used THEN they SHALL follow OS conventions

## Technical Requirements
- Electron 26+
- React/Vue for UI
- Electron Builder for packaging
- Auto-updater functionality
- Native menus and context menus
- System tray integration
- File system access

## Security Requirements
- Content Security Policy
- Secure communication between main/renderer
- Code signing for distribution
- Sandboxing where appropriate
```

## Backend/API Templates

### Node.js Express API
```markdown
# Requirements Document - [API Name]

## Project Context Analysis
- **Project Type**: REST API / GraphQL API
- **Framework**: Node.js with Express/Fastify
- **Database**: PostgreSQL/MongoDB
- **Business Domain**: [Domain]

## Functional Requirements

### REQ-API-001: RESTful Endpoints
**User Story:** As a client application, I want well-designed REST endpoints, so that I can interact with data efficiently

#### Acceptance Criteria
1. WHEN client makes GET request THEN API SHALL return appropriate data
2. IF client sends invalid data THEN API SHALL return descriptive error
3. WHERE authentication is required THEN API SHALL validate tokens

### REQ-API-002: Data Validation and Security
**User Story:** As a system, I want to validate all inputs, so that data integrity is maintained

#### Acceptance Criteria
1. WHEN data is received THEN system SHALL validate against schema
2. IF SQL injection is attempted THEN system SHALL prevent execution
3. WHERE sensitive data is stored THEN it SHALL be encrypted

## Technical Requirements
- Node.js 18+ LTS
- Express.js 4+ or Fastify 4+
- TypeScript for type safety
- Prisma/TypeORM for database
- JWT for authentication
- Rate limiting and CORS
- Comprehensive logging
- API documentation (OpenAPI/Swagger)

## Security Requirements
- Input validation and sanitization
- SQL injection prevention
- XSS protection
- Rate limiting
- HTTPS enforcement
- Secure headers
```

### Python FastAPI
```markdown
# Requirements Document - [Python API Name]

## Project Context Analysis
- **Project Type**: Python REST API
- **Framework**: FastAPI
- **Database**: PostgreSQL with SQLAlchemy
- **Business Domain**: [Domain]

## Functional Requirements

### REQ-PYAPI-001: High-Performance API
**User Story:** As a client, I want fast API responses, so that my application performs well

#### Acceptance Criteria
1. WHEN API receives request THEN response time SHALL be < 100ms
2. IF concurrent requests arrive THEN system SHALL handle efficiently
3. WHERE data processing is heavy THEN system SHALL use async operations

## Technical Requirements
- Python 3.11+
- FastAPI with Pydantic models
- SQLAlchemy 2.0+ for database
- Alembic for migrations
- pytest for testing
- Docker for containerization
- Automatic API documentation
```

## Game Development Templates

### Unity Game
```markdown
# Requirements Document - [Game Name]

## Project Context Analysis
- **Project Type**: Game Application
- **Engine**: Unity 2023.1+
- **Platforms**: [PC/Mobile/Console]
- **Genre**: [Action/Puzzle/Strategy/etc.]

## Functional Requirements

### REQ-GAME-001: Core Gameplay Loop
**User Story:** As a player, I want engaging gameplay, so that I enjoy playing the game

#### Acceptance Criteria
1. WHEN player starts game THEN core mechanics SHALL be immediately clear
2. IF player completes objective THEN system SHALL provide appropriate feedback
3. WHERE player fails THEN system SHALL offer clear restart/retry options

### REQ-GAME-002: Performance Optimization
**User Story:** As a player, I want smooth gameplay, so that the experience is enjoyable

#### Acceptance Criteria
1. WHEN game runs on target platform THEN frame rate SHALL maintain 60fps
2. IF memory usage grows THEN system SHALL manage efficiently
3. WHERE loading occurs THEN system SHALL provide progress feedback

## Technical Requirements
- Unity 2023.1+ LTS
- Universal Render Pipeline (URP)
- Input System Package
- Addressable Assets
- Unity Analytics
- Platform-specific optimizations

## Platform-Specific Requirements
[Customize based on target platforms]
```

## Usage Instructions

1. **Identify Project Type**: Based on user description, determine the primary project type
2. **Select Template**: Choose the most appropriate template from above
3. **Customize Context**: Fill in the [placeholders] with project-specific information
4. **Adapt Requirements**: Modify requirements based on specific user needs
5. **Follow Workflow**: Use the selected template within the enhanced SpecDev workflow
6. **Validate with User**: Ensure the selected template matches user expectations

## Template Customization Guidelines

- **Always** replace [placeholders] with actual project information
- **Adapt** complexity level based on user's experience and needs
- **Include** domain-specific compliance requirements
- **Add** platform-specific technical requirements
- **Ensure** all requirements follow EARS format
- **Validate** template selection with user before proceeding