---
description: "Automatic context summarization rules - Cursor agent automatically summarizes when context gets too long"
globs: ["**/*"]
alwaysApply: true
---

# Automatic Context Summarization Rules

## Priority: CRITICAL - AUTO-SUMMARIZE TO SAVE TOKENS AND COSTS

**MANDATORY: Cursor agent MUST automatically summarize context when it becomes too long. NO manual commands needed.**

## Auto-Summarization Triggers

### ALWAYS Summarize When:
- **Conversation > 8,000 tokens** (~6,000 words)
- **Context approaching limit** (80% of context window)
- **Performance degrading** due to long context
- **User mentions cost concerns** about tokens
- **Starting new SpecDev feature** (summarize previous work)
- **Switching between Requirements ‚Üí Design ‚Üí Tasks** phases

### Auto-Trigger Messages:
```
"I notice our conversation is getting quite long. Let me summarize the key points to save tokens and reduce costs while maintaining all important context."

"The context is approaching the limit. I'll create a comprehensive summary to optimize performance and cost."

"To keep costs down and maintain efficiency, I'm summarizing our previous discussion while preserving all critical decisions and context."
```

## What Agent MUST Preserve (Never Summarize)

### CRITICAL INFORMATION - Keep Detailed:
- **Current project context** (name, type, tech stack, domain)
- **Active feature work** (current requirements/design/tasks)
- **Recent decisions** (last 3-5 major decisions with rationale)
- **User preferences** explicitly stated
- **Current errors/issues** being worked on
- **Immediate next steps** and action items
- **Quality standards** and acceptance criteria
- **Technology versions** and specific configurations

### MUST PRESERVE EXACTLY:
- **Code snippets** currently being discussed
- **Error messages** from current session
- **File paths** and specific implementation details
- **User's specific requirements** for current feature
- **Validation criteria** for current tasks

## What Agent CAN Summarize

### COMPRESS TO KEY POINTS:
- **Completed features** from previous sessions
- **Resolved errors** and their solutions
- **Exploratory discussions** that reached conclusions
- **Repeated explanations** of same concepts
- **Historical context** no longer directly relevant
- **Verbose debugging** sessions that were resolved
- **Multiple iterations** of same requirements/design

## Auto-Summarization Format

### Agent MUST Use This Structure:
```markdown
## üìã Context Summary - [Current Date]

### üéØ Current Project Status
- **Project**: [Name and type]
- **Tech Stack**: [Current technologies]
- **Domain**: [Business domain]
- **Active Feature**: [What we're working on now]
- **Current Phase**: [Requirements/Design/Tasks/Implementation]

### üîë Key Decisions (Recent)
1. [Decision 1] - [Rationale] - [Date/Context]
2. [Decision 2] - [Rationale] - [Date/Context]
3. [Decision 3] - [Rationale] - [Date/Context]

### üìù Current Requirements Summary
- **Functional**: [Key functional requirements for current feature]
- **Non-Functional**: [Performance, security, usability requirements]
- **Constraints**: [Technical or business constraints]

### üèóÔ∏è Current Design Status
- **Architecture**: [Key architectural decisions]
- **Technologies**: [Specific versions and tools chosen]
- **Integration**: [How components connect]

### ‚úÖ Task Progress
- **Completed**: [Recently completed tasks]
- **In Progress**: [Current task being worked on]
- **Next**: [Immediate next tasks]

### üö® Error Solutions Applied
- **Error**: [Error type] ‚Üí **Solution**: [How it was fixed]
- [Additional error-solution pairs from recent work]

### üë§ User Preferences
- **Code Style**: [User's coding preferences]
- **Documentation**: [How user wants code documented]
- **Quality**: [User's quality requirements]
- **Workflow**: [User's preferred development approach]

### üéØ Immediate Next Actions
- [ ] [Most immediate task]
- [ ] [Next priority task]
- [ ] [Follow-up actions]

---
*Previous conversation summarized to optimize tokens and costs. All critical context preserved above.*
```

## Agent Behavior Rules

### AUTOMATIC SUMMARIZATION PROCESS:

#### 1. Monitor Context Length
```
Agent continuously monitors:
- Token count in current conversation
- Performance indicators
- Context window utilization
```

#### 2. Proactive Summarization
```
When triggers hit:
1. IMMEDIATELY announce summarization
2. Create comprehensive summary using format above
3. Continue conversation with summarized context
4. NO user confirmation needed - just do it
```

#### 3. Seamless Continuation
```
After summarization:
- Continue working on current task
- Reference summary when needed
- Maintain full understanding of project
- No loss of productivity or context
```

## Integration with SpecDev Workflow

### AUTO-SUMMARIZE AT THESE POINTS:
- **Feature Completion**: When finishing a feature, summarize before starting next
- **Phase Transitions**: Requirements ‚Üí Design ‚Üí Tasks ‚Üí Implementation
- **Error Resolution**: After resolving major errors, summarize solution
- **Session Changes**: When starting new development session
- **Context Limits**: When approaching token limits

### PRESERVE SPECDEV CONTEXT:
- **Current .specdev files** being worked on
- **Active feature specifications** 
- **Quality validation criteria**
- **Error database entries** being created
- **Version information** and migration status

## Cost Optimization Goals

### TARGET METRICS:
- **70-80% token reduction** from summarization
- **100% retention** of critical information
- **Zero productivity loss** from summarization
- **Seamless workflow continuation** after summary

### USER COST BENEFITS:
- **Reduced token usage** = lower API costs
- **Faster responses** = better performance
- **Maintained context** = no repeated explanations
- **Efficient development** = time savings

## Quality Assurance

### VALIDATION CHECKLIST:
Agent must ensure summary includes:
- [ ] Current project state accurately captured
- [ ] All recent decisions with rationale preserved
- [ ] User preferences and constraints included
- [ ] Current work context maintained
- [ ] Next steps clearly defined
- [ ] Error solutions documented
- [ ] Technology choices and versions noted

### FAILURE PREVENTION:
- **Never summarize** current active work
- **Always preserve** user's explicit requirements
- **Maintain** all quality standards and criteria
- **Keep** all recent error solutions and debugging context
- **Preserve** specific file paths and code references

## Implementation Notes

### FOR CURSOR AGENT:
1. **Monitor conversation length** automatically
2. **Trigger summarization** proactively - don't wait for user request
3. **Use exact format** provided above
4. **Continue seamlessly** after summarization
5. **Reference summary** when needed for context

### FOR USER EXPERIENCE:
- **Transparent process** - user sees what's happening
- **No interruption** - work continues smoothly
- **Cost savings** - reduced token usage
- **Maintained quality** - no loss of important information
- **Improved performance** - faster responses with shorter context

This automatic summarization system ensures optimal token usage and cost efficiency while maintaining complete project context and workflow continuity.