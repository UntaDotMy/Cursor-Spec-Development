---
description: "CRITICAL: Package installation and research workflow - ALWAYS research and install before coding"
globs: ["**/*"]
alwaysApply: true
---

# CRITICAL: Package Installation and Research Workflow

## üö® MANDATORY: RESEARCH ‚Üí INSTALL ‚Üí CODE (NEVER CODE FIRST)

**ABSOLUTE RULE: NEVER write code before researching and installing required packages**

```
‚ùå WRONG APPROACH:
   1. Write code
   2. Install packages later
   3. Fix dependency issues

‚úÖ CORRECT APPROACH:
   1. Research requirements and dependencies
   2. Install and configure packages
   3. Verify installation
   4. Then write code
```

## PRE-IMPLEMENTATION PACKAGE RESEARCH

### STEP 1: Dependency Analysis (MANDATORY)

**Before writing ANY code:**

```javascript
DEPENDENCY_RESEARCH_PHASE: {
  web_searches: [
    "[technology-stack] latest version 2025 2026 installation",
    "[framework-name] best packages dependencies 2025",
    "[project-type] essential packages recommended 2025",
    "[technology] package compatibility matrix 2025",
    "[framework] starter template dependencies"
  ],
  version_research: [
    "check latest stable versions",
    "verify compatibility matrix",
    "research breaking changes", 
    "identify peer dependencies",
    "check security vulnerabilities"
  ],
  existing_check: [
    "read package.json for current dependencies",
    "check node_modules for installed packages",
    "verify version conflicts",
    "identify missing dependencies"
  ]
}
```

### STEP 2: Package Research Documentation

**Create dependency research document:**

```markdown
# Dependency Research - [Feature Name]

## Technology Stack Analysis
- **Primary Framework**: [React/Vue/Angular] v[X.Y.Z]
- **Build Tool**: [Vite/Webpack/Parcel] v[X.Y.Z]
- **Language**: [TypeScript/JavaScript] v[X.Y.Z]
- **Target Platform**: [Web/Mobile/Desktop/Universal]

## Required Packages Research

### Core Dependencies
| Package | Current Ver | Latest Ver | Purpose | Compatibility | Security |
|---------|-------------|------------|---------|---------------|----------|
| react | 18.2.0 | 18.2.0 | UI Framework | ‚úÖ Compatible | ‚úÖ Secure |
| typescript | 4.9.5 | 5.3.0 | Type Safety | ‚ö†Ô∏è Breaking changes | ‚úÖ Secure |

### Development Dependencies  
| Package | Current Ver | Latest Ver | Purpose | Compatibility | Security |
|---------|-------------|------------|---------|---------------|----------|
| vite | 4.5.0 | 5.0.0 | Build Tool | ‚ö†Ô∏è Config changes | ‚úÖ Secure |
| eslint | 8.50.0 | 8.55.0 | Code Quality | ‚úÖ Compatible | ‚úÖ Secure |

### Peer Dependencies
- [List required peer dependencies]
- [Version compatibility requirements]
- [Installation order requirements]

## Research Sources
- **Official Documentation**: [URLs]
- **GitHub Repositories**: [URLs] 
- **Community Recommendations**: [Reddit/Stack Overflow URLs]
- **Security Advisories**: [Any vulnerabilities found]
- **Migration Guides**: [For version upgrades]
```

### STEP 3: Installation Planning

**Create installation plan:**

```markdown
# Installation Plan - [Feature Name]

## Pre-Installation Checklist
- [ ] Node.js version compatible: [current] vs [required]
- [ ] Package manager up to date: npm/yarn/pnpm
- [ ] Existing dependencies compatible
- [ ] No known security vulnerabilities
- [ ] Backup package.json and package-lock.json

## Installation Sequence
1. **Core Framework Dependencies**
   ```bash
   npm install react@18.2.0 react-dom@18.2.0
   ```
   - Verification: `npm ls react`
   - Expected: Clean dependency tree

2. **TypeScript Setup**
   ```bash  
   npm install -D typescript@5.3.0 @types/react@18.2.0 @types/react-dom@18.2.0
   ```
   - Verification: `tsc --version`
   - Expected: TypeScript 5.3.0

3. **Build Tools**
   ```bash
   npm install -D vite@5.0.0 @vitejs/plugin-react@4.0.0
   ```
   - Verification: `npx vite --version`
   - Expected: Vite 5.0.0

4. **Development Tools**
   ```bash
   npm install -D eslint@8.55.0 prettier@3.0.0
   ```
   - Verification: `npx eslint --version`
   - Expected: ESLint 8.55.0

## Post-Installation Verification
- [ ] All packages installed without errors
- [ ] No peer dependency warnings
- [ ] Development server starts successfully
- [ ] TypeScript compilation works
- [ ] Linting passes
- [ ] No security vulnerabilities: `npm audit`

## Configuration Requirements
- [ ] TypeScript config (tsconfig.json)
- [ ] Build tool config (vite.config.ts)
- [ ] Linting config (.eslintrc.js)
- [ ] Environment variables (.env files)
```

## IMPLEMENTATION WORKFLOW INTEGRATION

### SpecDev Task Integration

**Enhanced task template with package-first approach:**

```markdown
# Implementation Tasks - [Feature Name]

## Sprint 0: Foundation (MANDATORY FIRST)

### 0.1: Dependency Research and Analysis
- [ ] 0.1.1: Research latest versions for technology stack
  - **Research Required**: 
    - Search: "[framework] latest version 2025 installation guide"
    - Search: "[technology] dependencies best practices 2025"
    - Search: "[project-type] essential packages recommended"
  - **Deliverable**: Complete dependency research document
  - **Validation**: All packages researched with version compatibility verified

- [ ] 0.1.2: Security and compatibility audit
  - **Research Required**:
    - Search: "[package-name] security vulnerabilities 2025"
    - Search: "[framework] [version] breaking changes migration"
    - Check: npm audit for security issues
  - **Deliverable**: Security assessment report
  - **Validation**: No critical vulnerabilities, migration path documented

### 0.2: Package Installation and Configuration
- [ ] 0.2.1: Install core dependencies
  - **Prerequisites**: Dependency research completed (0.1.1)
  - **Commands**: [Exact installation commands from research]
  - **Validation**: Clean dependency tree, no peer dependency warnings
  - **Verification**: Package functionality test

- [ ] 0.2.2: Configure development environment
  - **Prerequisites**: Core packages installed (0.2.1)
  - **Tasks**: Setup TypeScript, linting, build tools
  - **Validation**: All tools working, no configuration errors
  - **Verification**: Development server starts successfully

- [ ] 0.2.3: Verify complete installation
  - **Prerequisites**: All packages and configs complete (0.2.2)
  - **Tests**: Run all verification commands
  - **Validation**: No errors, clean build, all tools working
  - **Documentation**: Installation verified and documented

## Sprint 1: Feature Implementation (ONLY AFTER SPRINT 0)

### 1.1: Core Feature Development
- [ ] 1.1.1: Implement base functionality
  - **Prerequisites**: ALL Sprint 0 tasks completed and verified
  - **Dependencies**: All required packages installed and configured
  - **Implementation**: Write feature code using installed packages
  - **Validation**: Feature works with installed dependencies

---
**CRITICAL RULES:**
1. üö´ NEVER proceed to Sprint 1 without completing Sprint 0
2. üö´ NEVER write code before installing dependencies
3. üö´ NEVER install packages without research
4. ‚úÖ ALWAYS verify installation before coding
5. ‚úÖ ALWAYS document dependencies and versions
```

## ERROR PREVENTION THROUGH PROPER SEQUENCING

### Common Errors Prevented by Package-First Approach

**Dependency-Related Errors:**

```javascript
PREVENTED_ERRORS: {
  "Cannot find module": {
    cause: "Package not installed before importing",
    prevention: "Install all dependencies before writing imports"
  },
  "Type errors": {
    cause: "@types packages missing or wrong version",
    prevention: "Install type definitions during package setup"
  },
  "Build failures": {
    cause: "Build tool dependencies missing",
    prevention: "Install and configure build tools first"
  },
  "Peer dependency warnings": {
    cause: "Dependencies installed in wrong order",
    prevention: "Follow proper installation sequence"
  },
  "Version conflicts": {
    cause: "Incompatible package versions",
    prevention: "Research compatibility matrix before installation"
  }
}
```

### Installation Verification Protocol

**After EVERY package installation:**

```markdown
## Package Installation Verification

### Immediate Checks
- [ ] Package appears in package.json dependencies
- [ ] Package installed in node_modules
- [ ] No error messages during installation
- [ ] No peer dependency warnings

### Functional Verification
- [ ] Import statement works without errors
- [ ] Basic functionality accessible
- [ ] TypeScript types available (if applicable)
- [ ] No runtime errors when using package

### Integration Verification  
- [ ] Works with existing packages
- [ ] No conflicts with build process
- [ ] Development server still starts
- [ ] All existing functionality still works

### Documentation Update
- [ ] Package added to dependency research document
- [ ] Version and purpose documented
- [ ] Configuration requirements noted
- [ ] Verification steps recorded
```

## ADVANCED PACKAGE MANAGEMENT

### Version Pinning Strategy

**Package version management:**

```json
{
  "dependencies": {
    "react": "18.2.0",          // Exact version for stability
    "typescript": "~5.3.0",     // Patch updates only  
    "eslint": "^8.55.0"        // Minor updates allowed
  },
  "devDependencies": {
    "vite": "5.0.0",           // Exact version for build consistency
    "@types/react": "^18.2.0"  // Type updates allowed
  }
}
```

**Version Strategy Rules:**
- **Exact versions** for critical packages (React, Vue, Angular)
- **Tilde (~)** for TypeScript and build tools (patch updates only)
- **Caret (^)** for type definitions and utilities (minor updates allowed)
- **Lock file** always committed for reproducible builds

### Dependency Conflict Resolution

**When version conflicts occur:**

```markdown
## Conflict Resolution Protocol

### Step 1: Identify Conflict
- [ ] Read conflict error message completely
- [ ] Identify which packages are conflicting
- [ ] Determine required version ranges

### Step 2: Research Resolution
- [ ] Search: "[package-a] [package-b] version conflict resolution"
- [ ] Check official documentation for compatibility
- [ ] Review GitHub issues for similar conflicts
- [ ] Find community solutions and workarounds

### Step 3: Apply Solution
- [ ] Try dependency resolution strategies:
  1. Update packages to compatible versions
  2. Use peer dependency overrides
  3. Install specific compatible versions
  4. Consider alternative packages
- [ ] Verify resolution doesn't break existing functionality
- [ ] Document solution for future reference

### Step 4: Prevention
- [ ] Add to package compatibility matrix
- [ ] Update installation guidelines
- [ ] Add conflict checks to verification process
```

## CONTINUOUS DEPENDENCY MANAGEMENT

### Regular Maintenance Protocol

**Weekly/Monthly dependency maintenance:**

```markdown
## Dependency Maintenance Checklist

### Security Updates
- [ ] Run: `npm audit` for security vulnerabilities
- [ ] Review and apply security patches
- [ ] Update packages with known vulnerabilities
- [ ] Document security fixes applied

### Version Updates
- [ ] Check for new stable releases
- [ ] Review changelog for breaking changes
- [ ] Test updates in development environment
- [ ] Apply non-breaking updates
- [ ] Plan migration for breaking changes

### Cleanup
- [ ] Remove unused dependencies
- [ ] Check for duplicate packages
- [ ] Optimize bundle size
- [ ] Update documentation
```

This package-first approach ensures reliable, secure, and maintainable dependency management while preventing the majority of installation and configuration errors that plague development projects.