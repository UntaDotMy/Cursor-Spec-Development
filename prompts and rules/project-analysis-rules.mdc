---
description: "Adaptive project analysis rules for all project types and platforms"
globs: ["**/*"]
alwaysApply: true
---

# Project Analysis Rules for Adaptive Requirements

## CRITICAL: Auto-Detection and Feature Creation

**WHENEVER user mentions ANY development task, IMMEDIATELY:**

1. **Detect project type and create feature**:
   - User: "I want to build a login system" → Create feature "user-authentication"
   - User: "Add shopping cart" → Create feature "shopping-cart" 
   - User: "Create admin dashboard" → Create feature "admin-dashboard"
   - User: "Build payment system" → Create feature "payment-processing"

2. **Create .specdev structure**:
   ```
   .specdev/specs/{feature-name}/
   ├── requirements.md
   ├── design.md
   └── tasks.md
   ```

3. **Start 3-phase workflow** with user validation at each step

## Step 1: Project Context Analysis

### 1.1 Analyze User Description

**Extract the following from user's description:**

1. **Project Type Identification**
   - Keywords: "web app", "mobile app", "API", "backend", "frontend", "desktop"
   - Default: web-app if unclear

2. **Business Domain Detection**
   - E-commerce: "shop", "store", "ecommerce", "marketplace", "payment"
   - Healthcare: "health", "medical", "patient", "clinical", "hospital"
   - Finance: "bank", "finance", "payment", "trading", "investment"
   - Education: "learning", "education", "course", "student", "teaching"
   - Social: "social", "chat", "messaging", "community", "networking"
   - Gaming: "game", "gaming", "player", "match", "tournament"
   - Default: "general" if unclear

3. **Complexity Assessment**
   - Simple: "basic", "simple", "small", "minimal", "prototype"
   - Complex: "enterprise", "scalable", "microservice", "distributed", "advanced"
   - Default: "medium" if unclear

4. **Technology Hints**
   - Extract mentioned technologies: React, Vue, Angular, Node.js, Python, etc.
   - Note any specific frameworks or tools mentioned

5. **Platform Targets**
   - Web: "web", "browser", "website"
   - Mobile: "mobile", "app", "iOS", "Android"
   - Desktop: "desktop", "electron", "native"

### 1.2 Workspace Analysis (if available)

**Check for these files and extract information:**

1. **package.json** (Node.js projects)
   ```javascript
   // Extract technologies from dependencies:
   // react -> React.js
   // express -> Express.js  
   // next -> Next.js
   // typescript -> TypeScript
   // @angular -> Angular
   // vue -> Vue.js
   ```

2. **requirements.txt** (Python projects)
   ```python
   # Extract Python frameworks:
   # django -> Django
   # flask -> Flask
   # fastapi -> FastAPI
   ```

3. **pom.xml or build.gradle** (Java projects)
   ```xml
   <!-- Extract Java frameworks:
   spring-boot -> Spring Boot
   spring-web -> Spring MVC -->
   ```

4. **Configuration Files**
   - `.env` files -> Environment variables, database types
   - `docker-compose.yml` -> Architecture, services, databases
   - `kubernetes/` -> Microservices architecture

### 1.3 Web Search for Latest Context

**Search for domain and technology-specific information:**

```
Search: "[business-domain] software requirements 2025 2026 best practices examples"
Search: "[project-type] [business-domain] compliance requirements examples 2025"
Search: "[technology-stack] latest version 2025 2026 features breaking changes examples"
Search: "[business-domain] security requirements privacy examples 2025 2026"
```

## Step 2: Adaptive Requirement Generation

### 2.1 Domain-Specific Requirements

**E-commerce Projects:**
```markdown
### REQ-E001: Product Management
**User Story:** As a store owner, I want to manage product catalog, so that customers can browse and purchase items

#### Acceptance Criteria
1. WHEN store owner adds product THEN system SHALL validate product data and store securely
2. IF product has variants THEN system SHALL manage inventory per variant
3. WHERE product is out of stock THEN system SHALL display availability status

**Compliance**: PCI-DSS for payment data, GDPR for customer data
**Security**: Input validation, SQL injection prevention, secure payment processing
```

**Healthcare Projects:**
```markdown
### REQ-H001: Patient Data Management  
**User Story:** As a healthcare provider, I want to manage patient records, so that I can provide quality care

#### Acceptance Criteria
1. WHEN patient data is entered THEN system SHALL encrypt data at rest and in transit
2. IF user accesses patient data THEN system SHALL log access for audit trail
3. WHERE patient requests data deletion THEN system SHALL comply within legal requirements

**Compliance**: HIPAA compliance mandatory, patient privacy protection
**Security**: End-to-end encryption, access controls, audit logging
```

**Finance Projects:**
```markdown
### REQ-F001: Financial Transaction Processing
**User Story:** As a user, I want to process financial transactions, so that I can manage my finances securely

#### Acceptance Criteria  
1. WHEN transaction is initiated THEN system SHALL validate funds and process securely
2. IF transaction fails THEN system SHALL rollback and notify user with clear error
3. WHERE suspicious activity detected THEN system SHALL flag for review

**Compliance**: PCI-DSS, SOX, anti-money laundering regulations
**Security**: Multi-factor authentication, transaction encryption, fraud detection
```

### 2.2 Technology-Specific Requirements

**React/Next.js Projects:**
```markdown
### REQ-T001: Modern React Implementation
**User Story:** As a developer, I want to use latest React patterns, so that the app is maintainable and performant

#### Acceptance Criteria
1. WHEN components are created THEN system SHALL use React 18+ features (Suspense, Concurrent Features)
2. IF state management is needed THEN system SHALL use appropriate solution (Context, Redux Toolkit, Zustand)
3. WHERE performance is critical THEN system SHALL implement code splitting and lazy loading

**Technical Requirements:**
- React 18+ with TypeScript
- Next.js 14+ for SSR/SSG
- Modern state management
- Performance optimization
```

**Node.js/Express Projects:**
```markdown
### REQ-T002: Secure API Development
**User Story:** As a system, I want to provide secure APIs, so that client applications can interact safely

#### Acceptance Criteria
1. WHEN API receives request THEN system SHALL validate input and authenticate user
2. IF rate limit exceeded THEN system SHALL return appropriate error with retry information
3. WHERE sensitive data is transmitted THEN system SHALL use HTTPS and proper headers

**Technical Requirements:**
- Express.js with security middleware
- Input validation and sanitization
- Rate limiting and CORS configuration
- Comprehensive error handling
```

### 2.3 Complexity-Based Requirements

**Simple Projects:**
```markdown
## Simplified Requirements Focus
- Core functionality only
- Basic security measures
- Simple deployment
- Minimal compliance (GDPR basic)
- Single-user or small-scale
```

**Medium Projects:**
```markdown
## Balanced Requirements
- Core + secondary features
- Standard security practices
- Scalable architecture
- Industry compliance
- Multi-user support
```

**Complex Projects:**
```markdown
## Enterprise Requirements
- Full feature set with advanced capabilities
- Enterprise security standards
- Microservices/distributed architecture
- Full compliance suite
- High availability and disaster recovery
```

## Templates for Different Project Types

### Web Application Template
```markdown
# Requirements Document - [Web App Name]

## Project Context Analysis
- **Project Type**: Web Application
- **Business Domain**: [Detected Domain]
- **Technology Stack**: [React/Vue/Angular] + [Backend Tech]
- **Complexity**: [Simple/Medium/Complex]
- **Compliance Needs**: [GDPR + Domain-specific]

## Core Web App Requirements
[Domain-specific requirements using above patterns]

## Technical Requirements
- Modern frontend framework with TypeScript
- Responsive design for mobile/desktop
- Progressive Web App capabilities
- SEO optimization
- Performance metrics (Core Web Vitals)

## Security Requirements  
- HTTPS enforcement
- Content Security Policy
- XSS protection
- Secure authentication
- Data encryption
```

### API/Backend Template
```markdown
# Requirements Document - [API Name]

## Project Context Analysis
- **Project Type**: API/Backend Service
- **Business Domain**: [Detected Domain]
- **Technology Stack**: [Node.js/Python/Java] + [Database]
- **Architecture**: [REST/GraphQL/gRPC]
- **Compliance Needs**: [Domain-specific]

## Core API Requirements
[Domain-specific requirements]

## Technical Requirements
- RESTful API design or GraphQL schema
- OpenAPI/Swagger documentation
- Rate limiting and throttling
- Caching strategy
- Database optimization
- Monitoring and logging

## Security Requirements
- API authentication (JWT/OAuth)
- Input validation and sanitization
- SQL injection prevention
- Rate limiting
- CORS configuration
```

### Mobile App Template
```markdown
# Requirements Document - [Mobile App Name]

## Project Context Analysis
- **Project Type**: Mobile Application
- **Platform**: [iOS/Android/Cross-platform]
- **Technology Stack**: [React Native/Flutter/Native]
- **Business Domain**: [Detected Domain]
- **Compliance Needs**: [App Store + Domain-specific]

## Core Mobile Requirements
[Domain-specific requirements]

## Platform Requirements
- App Store compliance (iOS/Google Play)
- Platform-specific UI guidelines
- Push notifications
- Offline functionality
- Device permissions management
- Performance optimization for mobile

## Security Requirements
- Secure storage (Keychain/Keystore)
- Certificate pinning
- Biometric authentication
- App integrity verification
```

This system allows the Cursor agent to generate highly contextual, domain-specific requirements without needing direct API calls, using web search and built-in analysis capabilities instead.